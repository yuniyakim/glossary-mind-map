{
  "nodes": [
    {
      "id": "pwa",
      "type": "term",
      "data": {
        "name": "Прогрессивное веб-приложение",
        "definition": "Технология в веб-разработке, которая визуально и функционально трансформирует сайт в приложение (мобильное приложение в браузере). Такое приложение поддерживает такую функциональность, как автономность, фоновая синхронизация и получение push-уведомления. При этом прогрессивные веб-приложения можно распространять и устанавливать без скачивания в магазинах приложений."
      },
      "position": {
        "x": 184,
        "y": -300
      }
    },
    {
      "id": "react",
      "type": "term",
      "data": {
        "name": "React",
        "definition": "JavaScript-библиотека для создания пользовательских интерфейсов. Ее отличительными особенностями, которые упрощают разработку приложений, являются: JSX-разметка, компонентный подход, виртуальный DOM, методы жизненного цикла, хуки."
      },
      "position": {
        "x": 200,
        "y": -8
      }
    },
    {
      "id": "component",
      "type": "term",
      "data": {
        "name": "Компонент",
        "definition": "JavaScript-функция (или класс), которая позволяет разделить пользовательский интерфейс на независимые друг от друга части и использовать каждый блок отдельно. Компонент обладает свойствами и состоянием, принимает произвольные данные (называемые props) и возвращает React-элементы, описывающие, что должно появиться на экране."
      },
      "position": {
        "x": 540,
        "y": 314
      }
    },
    {
      "id": "hooks",
      "type": "term",
      "data": {
        "name": "Хуки",
        "definition": "Специальные функции, которые позволяют определять состояние и работать с жизненным циклом функциональных компонентов. При необходимости разработчик может также создать своих хуки."
      },
      "position": {
        "x": 304,
        "y": 320
      }
    },
    {
      "id": "dom",
      "type": "term",
      "data": {
        "name": "Document Object Model (DOM)",
        "definition": "Не зависящий от платформы и языка программный интерфейс, позволяющий программам и скриптам получить доступ к содержимому HTML-, XHTML- и XML-документов, а также изменять содержимое, структуру и оформление таких документов. DOM обеспечивает представление документа в виде структурированной группы узлов и объектов, которые имеют свойства и методы."
      },
      "position": {
        "x": -28,
        "y": 64
      }
    },
    {
      "id": "vdom",
      "type": "term",
      "data": {
        "name": "Виртуальный DOM",
        "definition": "Легковесная копия обычного DOM, с которой взаимодействует React. Изменения, которые происходят с элементами веб-страниц, сначала производятся в виртуальном DOM, а затем вычисляется и осуществляется наименее затратная по количеству операций способ внесения этих изменений в реальный DOM. Данный подход позволяет более эффективно и быстро обновлять веб-страницы."
      },
      "position": {
        "x": 64,
        "y": 321
      }
    },
    {
      "id": "rn",
      "type": "term",
      "data": {
        "name": "React Native",
        "definition": "Кроссплатформенный фреймворк с открытым исходным кодом для разработки нативных мобильных и настольных приложений на JavaScript и TypeScript, созданный компанией Facebook, Inc. React Native поддерживает создание приложений для большого количества платформ, позволяя разработчикам использовать возможности библиотеки React вне браузера для создания нативных приложений, имеющих полный доступ к системным API платформ."
      },
      "position": {
        "x": 482,
        "y": 82
      }
    },
    {
      "id": "crossplat",
      "type": "term",
      "data": {
        "name": "Кроссплатформенная разработка",
        "definition": "Подход к мобильной разработке, при котором с помощью единой кодовой базы создаются приложения сразу для нескольких операционных систем. Как правило, такой подход не только облегчает разработку, но и позволяет быстрее выходить на рынок, а также снизить необходимые бюджет, человеческие ресурсы и имеющиеся знания. В кроссплатформенной разработке существует несколько подходов: гибридный, интерпретируемый и подход кросс-компиляции."
      },
      "position": {
        "x": 742,
        "y": -219
      }
    },
    {
      "id": "hybrid",
      "type": "term",
      "data": {
        "name": "Гибридный подход",
        "definition": "Один из подходов к разработке мобильных приложений, при котором компоненты пользовательского интерфейса структурированы и стилизованы исключительно с использованием веб-технологий, включая HTML и CSS. Яркими примерами фреймворков для реализации гибридного похода являются Ionic Framework и Apache Cordova."
      },
      "position": {
        "x": 915.1534540629978,
        "y": -66.13289655789379
      }
    },
    {
      "id": "interpret",
      "type": "term",
      "data": {
        "name": "Интерпретируемый подход",
        "definition": "Подход к разработке мобильных приложений, при котором для представления вместо веб-компонентов используются компоненты нативного интерфейса благодаря применению интерпретатора JavaScript вместе с нативными мостами. React Native является одним из самых распространенных фреймворков для разработки с использованием интерпретируемого подхода."
      },
      "position": {
        "x": 429,
        "y": -67
      }
    },
    {
      "id": "crosscomp",
      "type": "term",
      "data": {
        "name": "Подход кросс-компиляции",
        "definition": "Один из подходов к мобильной разработке, при котором происходит компиляция кода в нативные бинарные файлы для каждой поддерживаемой платформы. Это позволяет создавать нативные приложения, которые не зависят от интерпретаторов или веб-представления. Примером инструмента, реализующего данный подход, является Xamarin."
      },
      "position": {
        "x": 675,
        "y": -69
      }
    },
    {
      "id": "native",
      "type": "term",
      "data": {
        "name": "Нативный подход",
        "definition": "Подход к мобильной разработке, при котором приложения создаются с использованием языка программирования, специализирующего на разработке под данную платформу, например, Java и Kotlin для Android, Swift и Objective-C для iOS."
      },
      "position": {
        "x": 1100,
        "y": -200
      }
    },
    {
      "id": "proglang",
      "type": "term",
      "data": {
        "name": "Язык программирования",
        "definition": "Формальный язык, содержащий набор инструкций, которые производят различные виды выходных данных. Языки программирования используются в компьютерном программировании для реализации алгоритмов."
      },
      "position": {
        "x": -413,
        "y": -84
      }
    },
    {
      "id": "profiling",
      "type": "term",
      "data": {
        "name": "Профилирование",
        "definition": "Процесс анализа структуры и производительности программного обеспечения для определения паттернов использования, оптимизации кода, обнаружения утечек памяти, нерационального использования ресурсов и так далее."
      },
      "position": {
        "x": -264,
        "y": 119
      }
    },
    {
      "id": "emulator",
      "type": "term",
      "data": {
        "name": "Эмулятор",
        "definition": "Программа или устройство для создания одной виртуальной среды на устройстве с другой средой, например, эмулятор Android устройства на компьютере под управлением операционной системы Windows."
      },
      "position": {
        "x": -190,
        "y": 265
      }
    },
    {
      "id": "docker",
      "type": "term",
      "data": {
        "name": "Docker",
        "definition": "Программное обеспечение с открытым исходным кодом, применяемое для разработки, тестирования, доставки и запуска веб-приложений в средах с поддержкой контейнеризации."
      },
      "position": {
        "x": -500,
        "y": 119
      }
    },
    {
      "id": "mobile",
      "type": "term",
      "data": {
        "name": "Мобильная разработка",
        "definition": "Программное обеспечение, предназначенное для работы на смартфонах, планшетах и других мобильных (портативных, переносных, карманных) устройствах."
      },
      "position": {
        "x": 850,
        "y": -320
      }
    }
  ],
  "edges": [
    {
      "id": "1",
      "source": "react",
      "target": "component"
    },
    {
      "id": "2",
      "source": "react",
      "target": "hooks"
    },
    {
      "id": "3",
      "source": "react",
      "target": "vdom"
    },
    {
      "id": "4",
      "source": "dom",
      "target": "vdom"
    },
    {
      "id": "5",
      "source": "react",
      "target": "rn"
    },
    {
      "id": "6",
      "source": "interpret",
      "target": "rn"
    },
    {
      "id": "7",
      "source": "crossplat",
      "target": "crosscomp"
    },
    {
      "id": "8",
      "source": "crossplat",
      "target": "interpret"
    },
    {
      "id": "9",
      "source": "crossplat",
      "target": "hybrid"
    },
    {
      "id": "10",
      "source": "pwa",
      "target": "react"
    },
    {
      "id": "11",
      "source": "profiling",
      "target": "emulator"
    },
    {
      "id": "12",
      "source": "pwa",
      "target": "dom"
    },
    {
      "id": "13",
      "source": "pwa",
      "target": "proglang"
    },
    {
      "id": "14",
      "source": "pwa",
      "target": "docker"
    },
    {
      "id": "15",
      "source": "pwa",
      "target": "profiling"
    },
    {
      "id": "16",
      "source": "mobile",
      "target": "native"
    },
    {
      "id": "17",
      "source": "mobile",
      "target": "crossplat"
    }
  ]
}